########################
# Core Application
########################
services:
  core-api:
    image: ghcr.io/devmus/core-api:1.0.0
    networks:
      - integritas-network
    environment:
      - PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium
    ports:
      - "5005:5005"
    env_file:
      - ./core-api/.env

  mongodb:
    image: mongo:6.0
    networks:
      - integritas-network
    restart: always
    ports:
      - "27017:27017" # host:container
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      CORE_USER_PASSWORD: ${CORE_USER_PASSWORD}
    volumes:
      - integritas-core-db:/data/db
      - ./core-api/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  mongo-express:
    image: mongo-express
    networks:
      - integritas-network
    container_name: integritas-core-mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: integritas191
      ME_CONFIG_BASICAUTH_USERNAME: express # optional: web UI login
      ME_CONFIG_BASICAUTH_PASSWORD: express123 # optional: web UI login
      ME_CONFIG_MONGODB_SERVER: mongodb
    depends_on:
      - mongodb

  minio:
    image: minio/minio
    networks:
      - integritas-network
    ports:
      - "9900:9000"
      - "9901:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    restart: unless-stopped

  ########################
  # Search API
  ########################
  search-api:
    image: ghcr.io/devmus/search-api:latest
    networks:
      - integritas-network
    ports:
      - "9998:9998"
    env_file:
      - ./search-api/.env

  ################################################################################
  # Minima MySQL MEG..                                                           #
  #                                                                              #
  # Full Minima node backed by a MySQL database with MEG..                       #
  ################################################################################

  #MySQL Database to store all Minima Data.. all TxPoW etc..
  mysql:
    image: mysql:8.4
    networks:
      - integritas-network
    volumes:
      - ./minima-meg/mysql-data:/var/lib/mysql
    environment:
      #You can change the root password
      MYSQL_ROOT_PASSWORD: "rootpassword"
      #You can leave these.. ONLY change these if you ALSO change the login details below
      MYSQL_USER: "minimauser"
      MYSQL_PASSWORD: "minimapassword"
      MYSQL_DATABASE: "minimadb"
    restart: unless-stopped
    #You can access the MySQL db if you want by opening the port
    ports:
      - 3310:3306

  #Minima Node
  minima:
    image: minimaglobal/minima:dev
    networks:
      - integritas-network
    stop_grace_period: 60s
    restart: unless-stopped
    environment:
      #Main MDS password
      #minima_mdspassword: "123"

      #Initial PEERS - you can edit this or use the default
      minima_p2pnodes: "https://spartacusrex.com/minimapeers.txt"

      #If you are running on Desktop / no external IP enable this setting
      #minima_desktop: true
      #You must have rpc enabled so MEG can communicate - do NOT open port 9005
      minima_rpcenable: "true"
      #Enable the Public MDS
      #minima_publicmds: "true"
      minima_mdsenable: "false"
      #I use solo to test / debug
      #minima_solo: "true"
      #MDS is ENABLED by default in the container so you MUST set your MDS password to something good..
      minima_megammr: "true"
      minima_megaprune: "true"
      #MySQL login profiles:
      minima_mysqldb: "minimauser:minimapassword@mysql:3306/minimadb"
      minima_mysqldbdelay: "10000"
      minima_mysqlalltxpow: "true"
      minima_mysqldbcoins: "true"
      minima_rpccrlf: "true"
    #Opening the Minima ports.. You can change these if you are running multiple version on the same host
    ports:
      #Main Minima port - you can remove this if you don't have an external IP
      - 9001:9001
      #MDS port..
      - 9003:9003
      - 9005:9005
    #The main Minima data folder where you can load mysql archive files
    volumes:
      - ./minima-meg/data:/home/minima/data
      - ./minima-meg/backups:/home/minima/backups
    depends_on:
      - mysql

  #The MEG node.. waits for Minima to start
  meg:
    image: minimaglobal/meg:dev
    networks:
      - integritas-network
    stop_grace_period: 60s
    restart: unless-stopped
    ports:
      - 8080:8080
    environment:
      #The MAIN admin password - CHANGE this
      meg_adminpassword: "mypassword"

      #Do NOT change these..
      meg_minimarpc: "http://minima:9005/"
      meg_meghost: "http://meg:8080"

      #NEED this as minima waits for mysql
      meg_startupdelay: "20000"
    depends_on:
      - minima

  ########################
  # Minima explorer
  ########################

  explorer_typesense:
    image: typesense/typesense:28.0
    networks:
      - integritas-network
    ports:
      - "${TYPESENSE_PORT}:8108"
    volumes:
      - ./explorer/typesense-data:/data
    environment:
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
      - TYPESENSE_DATA_DIR=/data
    restart: unless-stopped

  explorer_mysql:
    image: mysql:8.0
    networks:
      - integritas-network
    ports:
      - "${MYSQL_EXPLORER_PORT}:3306"
    volumes:
      - ./explorer/mysql-data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_EXPLORER_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_EXPLORER_DATABASE}
      - MYSQL_USER=${DB_EXPLORER_USER}
      - MYSQL_PASSWORD=${DB_EXPLORER_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping"]
      interval: 10s
      timeout: 2s
      retries: 10

  init-script:
    image: node:18
    networks:
      - integritas-network
    volumes:
      - ./explorer/startup_scripts:/app/startup_scripts
      - ./explorer/package.json:/app/package.json
    working_dir: /app
    environment:
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
      - TYPESENSE_HOST=explorer_typesense
      - TYPESENSE_PORT=8108
      - TYPESENSE_TXPOW_COLLECTION_NAME=${TYPESENSE_TXPOW_COLLECTION_NAME}
      - DB_EXPLORER_HOST=explorer_mysql
      - DB_EXPLORER_PORT=3306
      - DB_EXPLORER_USER=root
      - DB_EXPLORER_PASSWORD=${DB_EXPLORER_ROOT_PASSWORD}
      - DB_EXPLORER_DATABASE=${DB_EXPLORER_DATABASE}
    depends_on:
      explorer_mysql:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for services to be ready...' &&
        sleep 10 &&
        npm install &&
        node startup_scripts/001_create_txpow_collection.js &&
        node startup_scripts/002_create_key_value_collection.js &&
        node startup_scripts/003_create_explorer_db.js
      "

  minima-explorer-lite:
    image: dynamitesushi/minima-explorer-lite:latest
    networks:
      - integritas-network
    ports:
      - "${EXPLORER_WEB_API_PORT}:3000"
    depends_on:
      init-script:
        condition: service_completed_successfully
    environment:
      - MINIMA_HOSTS=${MINIMA_HOSTS}
      - DB_MINIMA_HOST=${DB_MINIMA_HOST}
      - DB_MINIMA_PORT=${DB_MINIMA_PORT}
      - DB_MINIMA_USER=${DB_MINIMA_USER}
      - DB_MINIMA_PASSWORD=${DB_MINIMA_PASSWORD}
      - DB_MINIMA_DATABASE=${DB_MINIMA_DATABASE}
      - DB_EXPLORER_HOST=explorer_mysql
      - DB_EXPLORER_PORT=3306
      - DB_EXPLORER_USER=${DB_EXPLORER_USER}
      - DB_EXPLORER_PASSWORD=${DB_EXPLORER_PASSWORD}
      - DB_EXPLORER_DATABASE=${DB_EXPLORER_DATABASE}
      - TYPESENSE_HOST=explorer_typesense
      - TYPESENSE_PORT=8108
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY}
      - TYPESENSE_TXPOW_COLLECTION_NAME=${TYPESENSE_TXPOW_COLLECTION_NAME}
    restart: unless-stopped

  ########################################
  # Timestamp Server (PHP + Nginx + Cron)
  ########################################
  timestamp-web:
    image: nginx:latest
    networks: [integritas-network]
    ports:
      - "3010:3010"
    volumes:
      - ./timestamp/nginx.conf:/etc/nginx/conf.d/nginx.conf:ro
      - ./timestamp/app:/app:ro
    depends_on:
      - timestamp-php
    restart: unless-stopped

  # Dedicated Minima node for the Timestamp Server (no host ports)
  minima-ts:
    image: minimaglobal/minima:dev
    networks:
      - integritas-network
    stop_grace_period: 60s
    restart: unless-stopped
    environment:
      minima_rpcenable: "true"
      minima_rpccrlf: "true"
      minima_mdsenable: "false"
      # Use the same peers list (or your own)
      minima_p2pnodes: "https://spartacusrex.com/minimapeers.txt"
      # Separate data directory from the other node
      # (no MySQL integration needed for the timestamp server)
    volumes:
      - ./minima-ts/data:/home/minima/data
    ports:
      - 9999:9003
      - 9905:9005

  timestamp-php:
    build:
      context: ./timestamp
      dockerfile: PHP.Dockerfile
    networks: [integritas-network]
    volumes:
      - ./timestamp/app:/app:ro
    environment:
      TIMESTAMP_DB_HOST: ${TIMESTAMP_DB_HOST}
      TIMESTAMP_DB_NAME: ${TIMESTAMP_DB_NAME}
      TIMESTAMP_DB_USER: ${TIMESTAMP_DB_USER}
      TIMESTAMP_DB_PASSWORD: ${TIMESTAMP_DB_PASSWORD}
      MINIMA_RPC_URL: http://minima-ts:9005/
    depends_on:
      - timestamp-mysql
    restart: unless-stopped

  timestamp-mysql:
    image: mysql:8.0
    networks: [integritas-network]
    environment:
      MYSQL_ROOT_PASSWORD: ${TIMESTAMP_DB_ROOT_PASSWORD}
      MYSQL_USER: ${TIMESTAMP_DB_USER}
      MYSQL_PASSWORD: ${TIMESTAMP_DB_PASSWORD}
      MYSQL_DATABASE: ${TIMESTAMP_DB_NAME}
    ports:
      - "3311:3306" # avoids clashing with other MySQLs
    volumes:
      - ./timestamp/mysql-data:/var/lib/mysql
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mysqladmin ping -p${TIMESTAMP_DB_ROOT_PASSWORD} -h 127.0.0.1 || exit 1",
        ]
      interval: 10s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  timestamp-db-seeder:
    image: mysql:8.0
    networks: [integritas-network]
    volumes:
      - ./timestamp/table.sql:/table.sql:ro
    depends_on:
      timestamp-mysql:
        condition: service_healthy
    entrypoint:
      [
        "bash",
        "-c",
        "mysql --user=root --password=$${TIMESTAMP_DB_ROOT_PASSWORD} --host=timestamp-mysql --port=3306 $${TIMESTAMP_DB_NAME} < /table.sql",
      ]
    environment:
      TIMESTAMP_DB_ROOT_PASSWORD: ${TIMESTAMP_DB_ROOT_PASSWORD}
      TIMESTAMP_DB_NAME: ${TIMESTAMP_DB_NAME}
    restart: "no"

  timestamp-cron:
    build:
      context: ./timestamp
      dockerfile: CRON.Dockerfile
    networks: [integritas-network]
    environment:
      TIMESTAMP_DB_HOST: ${TIMESTAMP_DB_HOST}
      TIMESTAMP_DB_NAME: ${TIMESTAMP_DB_NAME}
      TIMESTAMP_DB_USER: ${TIMESTAMP_DB_USER}
      TIMESTAMP_DB_PASSWORD: ${TIMESTAMP_DB_PASSWORD}
      MINIMA_RPC_URL: http://minima-ts:9005/
    volumes:
      - ./timestamp/app:/app:ro
    entrypoint:
      - bash
      - -lc
      - |
        # export only the vars we need into /etc/environment for cron jobs
        {
          echo "TIMESTAMP_DB_HOST=${TIMESTAMP_DB_HOST}"
          echo "TIMESTAMP_DB_NAME=${TIMESTAMP_DB_NAME}"
          echo "TIMESTAMP_DB_USER=${TIMESTAMP_DB_USER}"
          echo "TIMESTAMP_DB_PASSWORD=${TIMESTAMP_DB_PASSWORD}"
          echo "MINIMA_RPC_URL=${MINIMA_RPC_URL}"
        } > /etc/environment
        cron -f -L 0
    depends_on:
      - timestamp-db-seeder
      - minima
    restart: unless-stopped

volumes:
  integritas-core-db:
  minio-data:

networks:
  integritas-network:
    external: true
